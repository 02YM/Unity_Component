# Component
- 기존에 존재하는 컴포넌트와 그 설정들을 다른 오브젝트에 복사-붙여넣기 하는 것이 가능하다.


# 상속받은 변수/프로퍼티
- 1. gameObject
-- GameObject go = this.gameObject;
-- 이 컴포넌트가 붙어있는 GameObject를 가져오는 속성
-- 예를 들어 Rigidbody, Transform, MyScript 같은 컴포넌트가 붙은 게임 오브젝트 자체를 가져올 수 있어
-- Rigidbody rb = gameObject.GetComponent<Rigidbody>(); 이걸 통해 다른 컴포넌트 접근 가능

- 2. tag
-- string tageName = gameObject.tag
-- 오브젝트에 설정된 Tag 문자열을 가져오거나 설정.
-- CompareTage("Player")로 성능 좋게 비교 가능
-- if(gameObject.CompareTage("Player")) {}

- 3. transform
-- Transform t = gameObject.transform;
-- 이 GameObject에 붙어 있는 Trnasform 컴포넌트를 가져옴
-- 사실 Component가 가진 편의 속성

- 4. hiderFlags
-- this.hideFlags = HideFlags.HideInInspector;
-- 이 오브젝트를 에디터에서 숨기거나 보호할 수 있는 설정
-- 주로 에디터 확장이나 툴 만들 떄 사용
-- 예 : 인스펙터에서 감추기, 씬 저장에서 제외 등

- 5.name
-- this.name = "MYobject"
-- 오브젝트의 이름을 가져오거나 설정
-- GameObject.name 과 같음
-- 디버깅이나 동적 생성할 때 자중 사용됨.
-- Debug.Log("이름 " +gameObject.name);

# 공개 메소드
- 1. GetComponent<T>()
-- 현재 오브젝트에서 특정 컴포넌트를 가져올 때 사용.

- 2. GetComponentInChildren<T>()
-- 자식 오브젝트 중에서 컴포넌트를 찾아 반환
-- UI나 계층 구조가 깊은 구조에서 유용

- 3. GetComponentInParent<T>()
- 부모 오브젝트에서 컴포넌트를 찾을 떄 사용.

- 4. TryGetComponent<T>(out T component)
-- null 체크 없이 안전하게 가져오기

- 5. CompareTage(string tag)
-- 오브젝트의 태그를 빠르게 비교할 때 사용
-- gameObject.tag == "Player" 와 의미는 갖지만 성능은 보다 좋음

- 6. SendMessage(string methodName)
-- 오브젝트에 특정 메서드 호출

- 7. BroadcastMessage(string methodName)
-- 자식 오브젝트까지 포함해서 메서드 호출

# 정적 메서드
- 1. Destroy(object)
-- 게임 오브젝트, 컴포넌트 또는 에셋을 파괴함

- 2. DontDestroyOnLoad(object)
-- 씬 전환 시에도 오브젝트가 파괴되지 않게 함.
-- 예 : BGM매니저, 게임 매니저 등에 자주 사용

- 3. FindAnyObjectByType<T>()
-- 아무거라도 하나라도 찾으면 반환

- 4. FindFirstObjectByType<T>()
-- 순서상 가장 먼저 로드된 객체 하나를 반환

- 5. FindObjectsByType<T>()
-- 씬 안의 모든 해당 타입의 오브젝트를 배열로 반환

- 6. Instantiate(object)
-- 프리팹 또는 오브젝트를 본제함
-- 위치, 회전도 함께 지정 가능